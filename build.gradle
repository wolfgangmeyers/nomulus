plugins {
    id 'com.intershop.gradle.jaxb' version '1.0.1'
    id 'net.ltgt.apt' version '0.5'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'com.eriwen.gradle.css' version '2.14.0'
    id 'net.researchgate.release' version '2.4.1'
    id "com.dorongold.task-tree" version "1.2.2"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'ivy-publish'
apply plugin: 'project-report'

group = 'google.registry'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

sourceSets {
    main.java.srcDirs = ['java', "$buildDir/generated/soy", "$buildDir/generated/fieldexposers"]
    main.resources.srcDirs = ['java']

    test.java.srcDirs = ['javatests']
    test.resources.srcDirs = ['javatests', "$buildDir/generated/resources"]
}

repositories {
    jcenter()
}

// Add the soy jar as a executable. This is referencing the 'dependencies' section
configurations { soyGenerator }

ext {
    // Dependency Versions
    daggerVersion = '2.7'

    autoCommonVersion = '0.7'
    autoFactoryVersion = '1.0-beta3'
    autoServiceVersion = '1.0-rc2'
    autoValueVersion = '1.3'

    googleAdminDirectoryVersion = 'directory_v1-rev50-1.19.1'
    googleDnsVersion = 'v2beta1-rev2-1.21.0'
    googleMonitoringVersion = 'v3-rev6-1.21.0'
    googleBigQueryVersion = 'v2-rev154-1.19.0'
    googleDriveVersion = 'v2-rev160-1.19.1'
    googleGroupSettingsVersion = 'v1-rev54-1.19.1'
    googleClientVersion = '1.22.0'

    appEngineVersion = '1.9.42'
    appEngineMapReduceVersion = '0.8.5'
    appEngineGcsClientVersion = '0.5'

    guavaVersion = '19.0'
    re2jVersion = '1.1'
    soyVersion = '2015-04-10'
    closureCompilerVersion = 'v20160315'

    jodaTimeVersion = '2.3'
    jodaMoneyVersion = '0.10.0'
    servletApiVersion = '6.0.20'
    jsonSimpleVersion = '1.1.1'
    jcommanderVersion = '1.48'
    icu4jVersion = '56.1'
    brainTreeJavaVersion = '2.54.0'
    coreVersion = '1.47.1'
    jzlibVersion = '1.1.3'
    dnsJavaVersion = '2.1.7'
    bouncycastleVersion = '1.52'
    errorproneVersion = '2.0.11'
    sshdCoreVersion = '1.2.0'
    closureTemplatesVersion = '20151008.0.0'
    hamcrestVersion = '1.3'
    junitVersion = '4.11'
    googleTruthVersion = '0.30'
    mockitoVersion = '1.9.5'
    ftpServerCoreVersion = '1.0.6'
    fastUtilVersion = '6.4.3'
    jacksonVersion = '2.8.3'
    minaCoreVersion = '2.0.0'
    slf4jVersion = '1.7.14'
}

dependencies {

    // Load google modified jars
    compile files(
            'third_party/java/jsch/v0_1_44_google/jsch-0.1.44_google.jar',
            'third_party/java/objectify/v4_1/objectify-4.1.3.jar'
    )

    // Dagger
    compile "com.google.dagger:dagger:$daggerVersion"
    testCompile "com.google.dagger:dagger:$daggerVersion"
    apt "com.google.dagger:dagger-compiler:$daggerVersion"
    testApt "com.google.dagger:dagger-compiler:$daggerVersion"

    // Auto
    compile ("com.google.auto:auto-common:$autoCommonVersion") { force = true }
    testCompile "com.google.auto:auto-common:$autoCommonVersion"
    compileOnly "com.google.auto.factory:auto-factory:$autoFactoryVersion"
    testCompileOnly "com.google.auto.factory:auto-factory:$autoFactoryVersion"
    apt "com.google.auto.factory:auto-factory:$autoFactoryVersion"
    testApt "com.google.auto.factory:auto-factory:$autoFactoryVersion"
    compileOnly "com.google.auto.service:auto-service:$autoServiceVersion"
    testCompileOnly "com.google.auto.service:auto-service:$autoServiceVersion"
    apt "com.google.auto.service:auto-service:$autoServiceVersion"
    testApt "com.google.auto.service:auto-service:$autoServiceVersion"
    compileOnly "com.google.auto.value:auto-value:$autoValueVersion"
    testCompileOnly "com.google.auto.value:auto-value:$autoValueVersion"
    apt "com.google.auto.value:auto-value:$autoValueVersion"
    testApt "com.google.auto.value:auto-value:$autoValueVersion"

    // Google
    compile "com.google.apis:google-api-services-admin-directory:$googleAdminDirectoryVersion"
    compile "com.google.apis:google-api-services-dns:$googleDnsVersion"
    compile "com.google.apis:google-api-services-monitoring:$googleMonitoringVersion"
    compile "com.google.apis:google-api-services-bigquery:$googleBigQueryVersion"
    compile "com.google.apis:google-api-services-drive:$googleDriveVersion"
    compile "com.google.apis:google-api-services-groupssettings:$googleGroupSettingsVersion"

    compile "com.google.guava:guava:$guavaVersion"
    testCompile "com.google.guava:guava-testlib:$guavaVersion"

    compile "com.google.re2j:re2j:$re2jVersion"

    // Add the soy jar as an executable so we can run it to create the templates
    soyGenerator "com.google.template:soy:$soyVersion"
    compile "com.google.template:soy:$soyVersion"

    compile "com.google.javascript:closure-compiler:$closureCompilerVersion"
    compile "com.google.gdata:core:$coreVersion"
    compile "com.google.errorprone:error_prone_annotations:$errorproneVersion"
    testCompile "com.google.truth:truth:$googleTruthVersion"

    compile("com.google.api-client:google-api-client:$googleClientVersion") { force = true }
    compile("com.google.api-client:google-api-client-appengine:$googleClientVersion") {
        force = true
    }
    compile("com.google.http-client:google-http-client:$googleClientVersion") { force = true }
    compile("com.google.http-client:google-http-client-appengine:$googleClientVersion") {
        force = true
    }
    compile("com.google.http-client:google-http-client-jackson2:$googleClientVersion") {
        force = true
    }
    compile("com.google.oauth-client:google-oauth-client:$googleClientVersion") { force = true }
    compile("com.google.oauth-client:google-oauth-client-appengine:$googleClientVersion") {
        force = true
    }

    compile("com.google.code.findbugs:jsr305:1.3.9") { force = true }

    compile "com.googlecode.json-simple:json-simple:$jsonSimpleVersion"

    compile("com.google.appengine:appengine-tools-sdk:$appEngineVersion") { force = true }
    compile("com.google.appengine:appengine-api-labs:$appEngineVersion") { force = true }
    compile "com.google.appengine:appengine-remote-api:$appEngineVersion"
    compile "com.google.appengine:appengine-testing:$appEngineVersion"
    compile("com.google.appengine:appengine-api-1.0-sdk:$appEngineVersion") { force = true }
    compile "com.google.appengine:gradle-appengine-plugin:$appEngineVersion"
    testCompile "com.google.appengine:appengine-testing:$appEngineVersion"
    testCompile "com.google.appengine:appengine-local-endpoints:$appEngineVersion"
    testCompile "com.google.appengine:appengine-api-stubs:$appEngineVersion"
    compile("com.google.appengine.tools:appengine-gcs-client:$appEngineGcsClientVersion") {
        force = true
    }
    compile "com.google.appengine.tools:appengine-mapreduce:$appEngineMapReduceVersion"

    // BouncyCastle
    compile "org.bouncycastle:bcpg-jdk15on:$bouncycastleVersion"
    compile "org.bouncycastle:bcprov-jdk15on:$bouncycastleVersion"
    compile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"

    // Apache
    compile("org.apache.mina:mina-core:$minaCoreVersion") { force = true }
    compile "org.apache.sshd:sshd-core:$sshdCoreVersion"
    testCompile "org.apache.sshd:sshd-core:$sshdCoreVersion"

    // Jackson
    compile("com.fasterxml.jackson.core:jackson-core:$jacksonVersion") { force = true }
    compile("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion") { force = true }

    // Misc
    compile "joda-time:joda-time:$jodaTimeVersion"
    compile "org.joda:joda-money:$jodaMoneyVersion"
    compile "org.apache.tomcat:servlet-api:$servletApiVersion"
    compile "com.beust:jcommander:$jcommanderVersion"
    compile "com.ibm.icu:icu4j:$icu4jVersion"
    compile "com.braintreepayments.gateway:braintree-java:$brainTreeJavaVersion"
    compile "com.jcraft:jzlib:$jzlibVersion"
    compile "dnsjava:dnsjava:$dnsJavaVersion"
    compile "org.webjars.npm:closure-templates:$closureTemplatesVersion"

    // Hamcrest matchers MUST come before junit to override junit's builtin org.hamcrest.Matcher
    testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
    testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
    testCompile "org.apache.ftpserver:ftpserver-core:$ftpServerCoreVersion"
    compile("it.unimi.dsi:fastutil:$fastUtilVersion") { force = true }
    compile("org.slf4j:slf4j-api:$slf4jVersion") { force = true }
}

test {
    systemProperty "file.encoding", "utf-8"

    // Add the default 'gpg' and 'tar' install locations to the path
    environment 'PATH', "/usr/local/bin:/usr/bin:$System.env.PATH"

    maxParallelForks = 2
    forkEvery = 1

    maxHeapSize = "1024m"

    // Ignore ui and parent tests
    exclude 'google/registry/ui/**'
    exclude '**/*TestCase*'
    exclude '**/*TestSuite*'

    testLogging.exceptionFormat = 'full'
    
    afterTest { desc, result ->
        switch (result.resultType) {
            case "SUCCESS": printTestResult("1;32", desc, result); break
            case "SKIPPED": printTestResult("1;33", desc, result); break
            case "FAILURE": printTestResult("1;31", desc, result); break
        }
    }

    reports {
        junitXml.enabled = true
        html.enabled = false
    }
}

def printTestResult(color, desc, result) {
    println "\033[${color}m${result.resultType}\033[0m: [${desc.className}] ${desc.name}"
}

// Remove generated code
clean {
    delete "$projectDir/schema"
}

task buildSchemaDir(type: Copy) {
    from('java/google/registry/xjc') {
        include 'bindings.xjb'
    }

    from('java/google/registry/xml/xsd') {
        include '*.xsd'
    }

    into 'schema'
}

compileJava.dependsOn += [
        'buildSchemaDir',
        'buildSoy',
        'makeCustomPackageInfo'
]

def adding_custom_package_info() {
    def out_dir = "$projectDir/build/generated/jaxb/java/ublConfig/google/registry/xjc"
    def result = exec {
        workingDir "$projectDir/java/google/registry/xjc/"
        commandLine './make_pkginfo.sh', 'package-info.java.in', out_dir
    }
}

jaxb {
    javaGen {
        ublConfig {
            binding = file('schema/bindings.xjb')
            schemas = fileTree(dir: 'schema', include: '*.xsd')
            args = ['-npa', '-quiet', '-extension']
        }
    }
}

task buildSoy << {

    // This is the list of packages to look for .soy files and generate classes from
    def soyPackages = [
            'java/google/registry/ui/soy/',
            'java/google/registry/ui/soy/registrar/',
            'java/google/registry/tools/soy/',
            'java/google/registry/flows/soy/'
    ]

    // Run the configurations.soyGenerator jar for each package and save the new classes to
    // build/generated/soy
    soyPackages.each { pkg ->
        def newPkg = pkg.replace('java/', '')
        def runSoy = [
            '--javaPackage',
            newPkg.replaceAll("/", "\\.")[0..-2], // Replace '/' with '.' then remove trailing '.'
            '--javaClassNameSource',
            'filename',
            '--outputDirectory',
            "build/generated/soy/${newPkg}"
        ] + (List) (fileTree(pkg) { include '*.soy' } // Find all '.soy' files
                .collect { "--srcs ${pkg}${it.name}".split(' ')} // ["--srcs", ".soy"]
                .flatten()) // join each array: ["--srcs", ".soy", "--srcs", ".soy"]

        javaexec {
            classpath configurations.soyGenerator
            main = 'com.google.template.soy.SoyParseInfoGenerator'
            args = runSoy
        }
    }
}

task makeCustomPackageInfo << {
    adding_custom_package_info()
}

shadowJar {
    baseName = 'domain-registry'
    classifier = null
    version = null
}

task sourceJar(type: Jar) {
    from sourceSets.main.java
    classifier 'source'
}

// Builds a test jar containing the compiled test classes
task testJar(type: Jar, dependsOn: testClasses) {
    from sourceSets.test.output.classesDir
    from sourceSets.test.output.resourcesDir
    classifier 'tests'
}

publishing {
    publications {
        ivy(IvyPublication) {
            from components.java

            // Publish the sources jar
            artifact(sourceJar) {
                type "source"
                conf "runtime"
            }

            // Publish the test jar
            artifact(testJar)
            descriptor.withXml {
                asNode().info[0].appendNode('description', description)
            }
        }
    }
    repositories {
        ivy {
            url = "s3://co.donuts.registry.build"
            credentials(AwsCredentials) {
                // Key and secret must be set in ~/.gradle/gradle.properties
                accessKey S3_ACCESS_KEY
                secretKey S3_SECRET_KEY
            }
        }
    }
}

afterReleaseBuild.dependsOn 'publish'

release {
    failOnUnversionedFiles = false
    failOnCommitNeeded = false
    git {
        requireBranch = '' // Jenkins checks out master in a detached state
        pushOptions = ['--no-verify']
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}
